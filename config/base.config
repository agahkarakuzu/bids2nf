// Base configuration for bids2nf
// This file contains shared configuration that applies to all profiles

// Default parameters - these can be overridden by profiles or command line
params {
    bids_dir = null
    bids2nf_config = null
    libbids_sh = null
    includeBidsParentDir = true
    max_memory = '2 GB'
    max_cpus = 1
    max_time = '30m'
    
    // Output settings
    output_dir = 'results'
    publish_dir_mode = 'copy'
    
    // Validation settings
    bids_validation = true
    
    // Logging settings
    log_level = 'INFO'
    debug_mode = false
}

// Process configuration
process {
    // Default resource allocation
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 2
    
    // Performance settings
    cache = 'lenient'
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
}

// Timeline and reporting
timeline {
    enabled = true
    file = "${params.output_dir}/timeline.html"
}

report {
    enabled = true
    file = "${params.output_dir}/report.html"
}

trace {
    enabled = true
    file = "${params.output_dir}/trace.txt"
}

dag {
    enabled = true
    file = "${params.output_dir}/dag.svg"
}

// Helper function to check maximum allowed resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}